library(e1071)
dat=read.csv("D:/毕设/isl/ALL+CSV+FILES+-+1st+Edition/ALL CSV FILES/Heart.csv")
names(dat)
set.seed(1)
sample=sample(nrow(dat),100)
dat_train=dat[sample_train,]
dat_test=dat[-sample_train,]
svmfit=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),data = dat_train,kernel = "linear",cost=10,scale = FALSE)
dat_train=dat[sample,]
dat_test=dat[-sample,]
svmfit=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),data = dat_train,kernel = "linear",cost=10,scale = FALSE)
summary(svmfit)
tune.out=tune(svm,as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),data = dat_train,kernel = "linear",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~.,data = dat_train,kernel = "linear",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~.,data = dat_train,kernel = "linear",ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(tune.out)
tune.out=tune(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),data = dat_train,kernel = "linear",
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),data = dat_train,kernel = "linear",
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),data = dat_train[:40,],kernel = "linear",
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),data = dat_train[1:40,],kernel = "linear",
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),data = dat_train,kernel = "linear",
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
svmfit_0.001=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=0.001,scale = FALSE)
svmfit_0.01=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=0.01,scale = FALSE)
summary(svmfit_0.001,svmfit_0.01)
summary(svmfit_0.001);summary(svmfit_0.01);
summary(svmfit_0.001);summary(svmfit_0.01);summary(svmfit_0.1);summary(svmfit_1);summary(svmfit_5);summary(svmfit_10);summary(svmfit_100)
svmfit_10=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=10,scale = FALSE)
svmfit_0.001=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=0.001,scale = FALSE)
svmfit_0.01=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=0.01,scale = FALSE)
svmfit_0.1=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=0.1,scale = FALSE)
svmfit_1=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=1,scale = FALSE)
svmfit_5=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=5,scale = FALSE)
svmfit_10=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=10,scale = FALSE)
svmfit_100=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=100,scale = FALSE)
summary(svmfit_0.001);summary(svmfit_0.01);summary(svmfit_0.1);summary(svmfit_1);summary(svmfit_5);summary(svmfit_10);summary(svmfit_100)
svmfit_10=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=10,scale = FALSE)
summary(svmfit_10)
x=matrix(rnorm(20*2),ncol=2)
y=c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,]+1
x
y
plot(x,col(3-y))
plot(x,col=(3-y))
dat=data.frame(x=x,y=as.factor(y))
svmfit=svm(y~.,data=dat,kernel="linear",cost=10)
tune.out=tune(svm,y~.,data=dat,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(tune.out)
tune.out=tune(svm,as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~Age+Sex+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca,
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~Age+Sex+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca,
data = dat_train[,-c("ChestPain","Thal")],kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~Age+Sex+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca,
data = dat_train[,-"ChestPain"][,-"Thal"],kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~Age+Sex+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca,
data = dat_train[,-"ChestPain"],kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
dat_train[,-"ChestPain"]
tune.out=tune(svm,as.factor(AHD)~Age+Sex+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca,
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,AHD~Age+Sex+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca,
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~Age+Sex+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca,
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~.,
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tune.out=tune(svm,as.factor(AHD)~Age+Sex,
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
dat=read.csv("D:/毕设/isl/ALL+CSV+FILES+-+1st+Edition/ALL CSV FILES/Heart.csv")
names(dat)
set.seed(1)
sample=sample(nrow(dat),100)
dat_train=dat[sample,]
dat_test=dat[-sample,]
svmfit_10=svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel = "linear",cost=10,scale = FALSE)
summary(svmfit_10)
tune.out=tune(svm,as.factor(AHD)~Age+Sex,
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
plot(svmfit_10,dat_train)
tuned<-tune.svm(as.factor(AHD)~Age+Sex,
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tuned<-tune.svm(as.factor(AHD)~Age+Sex+as.factor(ChestPain)+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+as.factor(Thal),
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
dat_train$AHD=as.factor(dat_train$AHD)
dat_train$ChestPain=as.factor(dat_train$ChestPain)
dat_train$Thal=as.factor(dat_train$Thal)
tuned<-tune.svm(AHD~Age+Sex+ChestPain+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+Thal,
data = dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
tuned<-tune.svm(AHD~Age+Sex+ChestPain+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+Thal,
dat_train,kernel="linear",ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
?tune.svm
tuned<-tune.svm(AHD~Age+Sex+ChestPain+RestBP+Chol+Fbs+RestECG+MaxHR+ExAng+Oldpeak+Slope+Ca+Thal,
data = dat_train,kernel="linear",cost=c(0.001,0.01,0.1,1,5,10,100))
summary(tune.out)
View(svmfit_0.001)
library(e1071)
library(pROC)
library(ROCR)
library(ggplot2)
dat = read.csv("D:/毕设/红酒模型及数据/wineDataML_3000AllNorm.csv")
dat = na.omit(dat)
names(dat)
set.seed(1)
sample = sample(nrow(dat), 100)
dat_train = dat[sample, ]
dat_test = dat[-sample, ]
tuned <-
tune.svm(
价格区间 ~ .,
data = dat_train,
kernel = "linear",
cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)
)
summary(tuned)
svmfit = svm(
价格区间 ~ .,
data = dat_train,
kernel = "linear",
cost = 0.1,
scale = FALSE,
fitted=TRUE
)
summary(svmfit)
table(svmfit$fitted, dat_train$价格区间)
pred = predict(svmfit, newdata = dat_test,decision.values = TRUE)
table(pred, dat_test$价格区间)
fitted=attributes(predict(svmfit,dat_test,decision.values  =TRUE))$decision.values
summary(fitted)
View(dat_test)
View(dat_train)
roc(
dat_test[, "价格区间"],
fitted,
plot = TRUE,
legacy.axes = TRUE,
percent = TRUE,
print.auc = TRUE,
print.auc.x = 45
) #网上找的方法，推荐
roc(
dat_test[, "价格区间"],
fitted,
plot = TRUE,
legacy.axes = TRUE,
percent = TRUE,
print.auc = TRUE,
print.auc.x = 45，
col="red"
) #网上找的方法，推荐
roc(
dat_test[, "价格区间"],
fitted,
plot = TRUE,
legacy.axes = TRUE,
percent = TRUE,
print.auc = TRUE,
print.auc.x = 45,
col="red"
) #网上找的方法，推荐
roc(
dat_test[, "价格区间"],
fitted,
plot = TRUE,
legacy.axes = TRUE,
percent = TRUE,
print.auc = TRUE,
print.auc.x = 45,
col="red"
) #网上找的方法，推荐
roc(
dat_test[, "价格区间"],
fitted,
plot = TRUE,
legacy.axes = TRUE,
percent = TRUE,
print.auc = TRUE,
print.auc.x = 45,
col="red"
) #网上找的方法，推荐
#决定使用多项式核函数
tuned <-
tune.svm(
价格区间 ~ .,
data = dat_train,
kernel = "linear",
cost = c(0.1, 1, 5, 10, 100),
gamma = c(0.5,1,2,3,4)
)
summary(tuned)
svmfit = svm(
价格区间 ~ .,
data = dat_train,
kernel = "radial",
cost = 0.1,
gamma = 0.5,
scale = FALSE,
fitted=TRUE
)
summary(svmfit)
fitted=attributes(predict(svmfit,dat_test,decision.values  =TRUE))$decision.values
summary(fitted)
roc(
dat_test[, "价格区间"],
fitted,
plot = TRUE,
legacy.axes = TRUE,
percent = TRUE,
print.auc = TRUE,
print.auc.x = 45,
col="red"
) #网上找的方法，推荐
set.seed(1)
sample = sample(nrow(dat), 1000)
dat_train = dat[sample, ]
dat_test = dat[-sample, ]
tuned <-
tune.svm(
价格区间 ~ .,
data = dat_train,
kernel = "linear",
cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)
)
summary(tuned)
summary(tuned)
View(dat_train)
tuned <-
tune.svm(
价格区间 ~ .,
data = dat_train,
kernel = "linear",
cost = c(0.001, 0.01, 0.1)
)
summary(tuned)
tuned <-
tune.svm(
价格区间 ~ .,
data = dat_train,
kernel = "linear",
cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)
)
summary(tuned)
svmfit = svm(
价格区间 ~ .,
data = dat_train,
kernel = "linear",
cost = 100,
scale = FALSE,
fitted=TRUE
)
summary(svmfit)
fitted=attributes(predict(svmfit,dat_test,decision.values  =TRUE))$decision.values
summary(fitted)
roc(
dat_test[, "价格区间"],
fitted,
plot = TRUE,
legacy.axes = TRUE,
percent = TRUE,
print.auc = TRUE,
print.auc.x = 45,
col="red"
) #网上找的方法，推荐
#决定使用多项式核函数
tuned <-
tune.svm(
价格区间 ~ .,
data = dat_train,
kernel = "linear",
cost = c(0.1, 1, 5, 10, 100),
gamma = c(0.5,1,2,3,4)
)
summary(svmfit)
svmfit = svm(
价格区间 ~ .,
data = dat_train,
kernel = "radial",
cost = 100,
gamma = 0.03125,
scale = FALSE,
fitted=TRUE
)
summary(svmfit)
fitted=attributes(predict(svmfit,dat_test,decision.values  =TRUE))$decision.values
summary(fitted)
roc(
dat_test[, "价格区间"],
fitted,
plot = TRUE,
legacy.axes = TRUE,
percent = TRUE,
print.auc = TRUE,
print.auc.x = 45,
col="red"
) #网上找的方法，推荐
?svm
?tune
?tune.svm
#PCA主成分分析
apply(dat_train, 2, mean)
apply(dat_train,2,var)
pr.out=prcomp(dat_train,scale = TRUE)
names(pr.out)
pr.out$center; pr.out$scale
#主成分载荷信息
pr.out$rotation
#查看特征矩阵的信息
dim(pr.out$x)
#双标图
biplot(pr.out,scale = 0)
?biplot
#双标图
biplot(pr.out,scale = 0,var.axes=TRUE)
#主成分标准差
pr.out$sdev
#输出解释程度
pve=pr.var/sum(pr.var)
pr.var=pr.out$sdev^2
pr.var
pve=pr.var/sum(pr.var)
pve
?nuke
dat_train[c("品牌","商品产地","新旧世界","品酒进阶","名庄","甜度","口感"),]
View(dat_train)
dat_train[,c("品牌","商品产地","新旧世界","品酒进阶","名庄","甜度","口感")]
dat.pcaa=dat_train[,c("品牌","商品产地","新旧世界","品酒进阶","名庄","甜度","口感")]
#代入主成分分析函数
pr.out=prcomp(dat.pcaa,scale = TRUE)
#查看函数输出内容的类型
names(pr.out)
#标准化后的数据均值
pr.out$center
#标准化后的数据方差
pr.out$scale
#主成分载荷信息
pr.out$rotation
#查看特征矩阵的信息
dim(pr.out$x)
#双标图
biplot(pr.out,scale = 0)
#主成分标准差
pr.out$sdev
#输出解释程度
pr.var=pr.out$sdev^2
pr.var
pve=pr.var/sum(pr.var)
pve
#系统聚类法
hc.complete=hclust(dist(dat_train),method = "complete")
hc.average=hclust(dist(dat_train),method = "average")
hc.single=hclust(dist(dat_train),method = "single")
plot(hc.complete,main = "Complete Linkage",xlab="",sub="",cex=.9)
plot(hc.average,main = "Complete Linkage",xlab="",sub="",cex=.9)
plot(hc.single,main = "Complete Linkage",xlab="",sub="",cex=.9)
?hclust
plot(hc.complete,main = "Complete Linkage",xlab="",sub="",cex=.9,labels = FALSE)
#K-均值聚类法
km.out=kmeans(dat_train,4,nstart = 20)
plot(dat_train,col=(km.out$cluster+1),main="K-means Clustering Results with K=4")
plot(dat_train,col=(km.out$cluster+1),main="K-means Clustering Results with K=4",xlab="",ylab="",pch=20,cex=2)
plot(dat_train,col=(km.out$cluster+1),main="K-means Clustering Results with K=4",ylab="",pch=20,cex=2)
plot(dat_train,col=(km.out$cluster+1),main="K-means Clustering Results with K=4",pch=20,cex=2)
library(randomForest)
rf.redwine=randomForest(价格区间~.-价格区间,data = dat_train,mtry=33,importance=TRUE)
rf.redwine
yhat.rf=predict(rf.redwine,newdata=dat_test)
table(yhat.rf,dat_test[,"价格区间"])
varImpPlot(rf.redwine)
dat_train$价格区间=as.factor(dat_train$价格区间)
dat_test$价格区间=as.factor(dat_test$价格区间)
rf.redwine=randomForest(价格区间~.-价格区间,data = dat_train,mtry=33,importance=TRUE)
rf.redwine=randomForest(价格区间~.-价格区间,data = dat_train,mtry=32,importance=TRUE)
yhat.rf=predict(rf.redwine,newdata=dat_test)
table(yhat.rf,dat_test[,"价格区间"])
rf.redwine=randomForest(价格区间~.-价格区间,data = dat_train,mtry=6,importance=TRUE)
rf.redwine
yhat.rf=predict(rf.redwine,newdata=dat_test)
table(yhat.rf,dat_test[,"价格区间"])
varImpPlot(rf.redwine)
text(prune.redwine,pretty=0)
